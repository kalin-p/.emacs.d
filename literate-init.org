* Infrastructural
** Early init
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** Bootstrap ~straight~ for package management
#+begin_src emacs-lisp :tangle init.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+end_src

* Defaults
** General settings
#+begin_src emacs-lisp :tangle init.el
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (global-hl-line-mode 1)
  (delete-selection-mode 1)
  (global-display-line-numbers-mode 1)
  (column-number-mode)
  (desktop-save-mode 1)
  (global-visual-line-mode 1)

  (setq visible-bell 1
        mode-require-final-newline nil
        inhibit-startup-message t
        backup-directory-alist '(("." . "~/.emacs_backups"))
        undo-tree-history-directory-alist '(("." . "~/.emacs_undos"))
        eldoc-echo-area-prefer-doc-buffer t)

  (setq-default fill-column 80)

  (global-set-key (kbd "C-x k") #'kill-this-buffer)
#+end_src
** Ibuffer
#+begin_src emacs-lisp :tangle init.el
  (global-set-key (kbd "C-X C-b") #'ibuffer)
  (add-hook 'ibuffer-mode-hook 'ibuffer-set-filter-groups-by-mode)
#+end_src

** Make ~dired~ less verbose by default
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

** Theme
#+begin_src emacs-lisp :tangle init.el
  (use-package timu-spacegrey-theme)
  (load-theme 'timu-spacegrey t)
#+end_src

** Search with ~helm~
#+begin_src emacs-lisp :tangle init.el
  (use-package helm
    :config
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "C-s") #'helm-occur)
    (global-set-key (kbd "M-y") #'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") #'helm-mini)
    (global-set-key (kbd "C-c h") #'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (helm-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)'
    (setq helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t))
#+end_src

** ~undo-tree~
#+begin_src emacs-lisp :tangle init.el
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src

** Tooltips - ~which-key~
#+begin_src emacs-lisp :tangle init.el
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** d2
#+begin_src emacs-lisp :tangle init.el
  (use-package d2-mode
    :config (add-to-list 'auto-mode-alist '("\\.d2\\'" . d2-mode)))
#+end_src

** Treemacs
#+begin_src emacs-lisp :tangle no
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

  (treemacs-start-on-boot)
#+end_src
* ~org-mode~ defaults and ~org-roam~
#+begin_src emacs-lisp :tangle init.el
  (use-package org
    :straight (:type built-in))

  (setq org-startup-indented t
	org-todo-keywords '((sequence "TODO" "WIP" "PAUSED" "|" "DONE" "OBSOLETE"))
	org-todo-keyword-faces '(("WIP" . "SteelBlue1")
				 ("PAUSED" . "MediumSlateBlue"))
	org-agenda-files '("~/org-roam/daily")
	org-time-stamp-custom-formats '("%a %d %b %Y %H:%M"))

  (use-package org-roam
    :config
    (setq org-roam-directory (file-truename "~/org-roam"))
    (org-roam-db-autosync-mode)
    :after (org))

  (use-package org-roam-ui
    :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t))
#+end_src

* Development
** Git
#+begin_src emacs-lisp :tangle init.el
  (use-package magit)
#+end_src
** Completions
#+begin_src emacs-lisp :tangle init.el
  (use-package company
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
      (global-company-mode))
#+end_src
** Project navigation
#+begin_src emacs-lisp :tangle init.el
  (use-package projectile
    :config (projectile-mode +1)
    :custom ((projectile-completion-system 'helm))
    :bind
    ("C-c p" . projectile-command-map))
#+end_src

** Syntax highlighting ~tree-sitter~
#+begin_src emacs-lisp :tangle init.el  
  (use-package treesit
    :straight (:type built-in)
    :config
    (let* ((recipes '((c "https://github.com/tree-sitter/tree-sitter-c" nil nil nil nil)
                      (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" nil nil nil nil))
                      (typescript "https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src/" nil nil)
                      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src" nil nil)
                      (python "https://github.com/tree-sitter/tree-sitter-python" nil nil nil nil)
                      (json "https://github.com/tree-sitter/tree-sitter-json" nil nil nil nil)
                      (bash "https://github.com/tree-sitter/tree-sitter-bash" nil nil nil nil)
                      (rust "https://github.com/tree-sitter/tree-sitter-rust" nil nil nil nil)
                      (css "https://github.com/tree-sitter/tree-sitter-css" nil nil nil nil)
                      (html "https://github.com/tree-sitter/tree-sitter-html" nil nil nil nil)
                      (toml "https://github.com/tree-sitter/tree-sitter-toml" nil nil nil nil)
                      (wgsl "https://github.com/szebniok/tree-sitter-wgsl" nil nil nil nil)))
           (langs (mapcar #'car recipes)))

      (mapcar (lambda (arg) (add-to-list 'treesit-language-source-alist arg)) recipes)
      (mapcar (lambda (lang) (unless (treesit-language-available-p lang)
                               (treesit-install-language-grammar lang)))
              langs)))
#+end_src

** TypeScript
#+begin_src emacs-lisp :tangle init.el
  (use-package tide
    :config
    (setq typescript-indent-level 2)
    (add-hook 'tsx-mode-hook #'setup-tide-mode))
#+end_src

** WGSL
#+begin_src emacs-lisp :tangle init.el
  (use-package wgsl-ts-mode
    :straight (wgsl-ts-mode :type git :host github :repo "acowley/wgsl-ts-mode")
    :config
    (add-hook 'wgsl-ts-mode 'turn-on-font-lock))
#+end_src

** Rust
#+begin_src emacs-lisp :tangle init.el
  (use-package rust-ts-mode
    :straight (:type built-in)
    :config
    (add-hook 'rust-ts-mode-hook 'eglot-ensure)
    :mode "\\.rs\\'")
#+end_src

** Python
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'python-ts-mode-hook 'pyvenv-mode)
  (add-hook 'python-ts-mode-hook 'eglot-ensure)

  (use-package poetry
    :after python-mode)
#+end_src
