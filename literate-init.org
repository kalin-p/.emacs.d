* Infrastructural
** Early init
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** Bootstrap ~straight~ for package management
#+begin_src emacs-lisp :tangle init.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+end_src

* Defaults
** General settings
#+begin_src emacs-lisp :tangle init.el
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (global-hl-line-mode 1)
  (delete-selection-mode 1)
  (global-display-line-numbers-mode 1)
  (column-number-mode)
  (desktop-save-mode 1)
  (global-visual-line-mode 1)

  (setq visible-bell 1
        mode-require-final-newline nil
        inhibit-startup-message t
        backup-directory-alist '(("." . "~/.emacs_backups"))
        undo-tree-history-directory-alist '(("." . "~/.emacs_undos"))
        help-window-select t)

  (setq-default fill-column 80)

  (global-set-key (kbd "C-x k") #'kill-this-buffer)
  (global-set-key (kbd "C-c w") #'whitespace-mode)
#+end_src

** Make ~dired~ less verbose by default
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

** Theme
#+begin_src emacs-lisp :tangle init.el
  (use-package timu-spacegrey-theme)
  (load-theme 'timu-spacegrey t)
#+end_src

** Search with ~helm~
#+begin_src emacs-lisp :tangle init.el
  (use-package helm
    :config
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "C-s") #'helm-occur)
    (global-set-key (kbd "M-y") #'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") #'helm-mini)
    (global-set-key (kbd "C-c h") #'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (helm-mode 1))
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)'
  (setq helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match t)
#+end_src

** ~undo-tree~
#+begin_src emacs-lisp :tangle init.el
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+end_src

** Tooltips - ~which-key~
#+begin_src emacs-lisp :tangle init.el
  (use-package which-key
    :init
    (which-key-mode))
#+end_src

** d2
#+begin_src emacs-lisp :tangle init.el
  (use-package d2-mode)
  (add-to-list 'auto-mode-alist '("\\.d2\\'" . d2-mode))
#+end_src

* ~org-mode~ defaults and ~org-roam~
#+begin_src emacs-lisp :tangle init.el
  (use-package org
    :straight (:type built-in))

  (setq org-startup-indented t
	org-todo-keywords '((sequence "TODO" "WIP" "PAUSED" "|" "DONE" "OBSOLETE"))
	org-todo-keyword-faces '(("WIP" . "SteelBlue1")
				 ("PAUSED" . "MediumSlateBlue"))
	org-agenda-files '("~/org-roam/daily")
	org-time-stamp-custom-formats '("%a %d %b %Y %H:%M"))

  (use-package org-roam
    :config
    (setq org-roam-directory (file-truename "~/org-roam"))
    (org-roam-db-autosync-mode)
    :after (org))

  (use-package org-roam-ui
    :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t))
#+end_src

* Development
** Git
#+begin_src emacs-lisp :tangle init.el
  (use-package magit)
#+end_src
** Completions
#+begin_src emacs-lisp :tangle init.el
  (use-package company
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
      :init
      (global-company-mode))
#+end_src
** Project navigation
#+begin_src emacs-lisp :tangle init.el
  (use-package projectile
    :config (projectile-mode +1)
    :custom ((projectile-completion-system 'helm))
    :bind
    ("C-c p" . projectile-command-map))
#+end_src

** Syntax highlighting ~tree-sitter~
#+begin_src emacs-lisp :tangle init.el
  (use-package treesit
    :straight (:type built-in))

  (let* ((recipes '((c "https://github.com/tree-sitter/tree-sitter-c" nil nil nil nil)
                    (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" nil nil nil nil))
                    (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.1" "typescript/src/" nil nil)
                    (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.1" "tsx/src" nil nil)
                    (python "https://github.com/tree-sitter/tree-sitter-python" nil nil nil nil)
                    (json "https://github.com/tree-sitter/tree-sitter-json" nil nil nil nil)
                    (bash "https://github.com/tree-sitter/tree-sitter-bash" nil nil nil nil)
                    (rust "https://github.com/tree-sitter/tree-sitter-rust" nil nil nil nil)
                    (css "https://github.com/tree-sitter/tree-sitter-css" nil nil nil nil)
                    (html "https://github.com/tree-sitter/tree-sitter-html" nil nil nil nil)
                    (toml "https://github.com/tree-sitter/tree-sitter-toml" nil nil nil nil)
                    (wgsl "https://github.com/szebniok/tree-sitter-wgsl" nil nil nil nil)
                    (yaml "https://github.com/ikatyang/tree-sitter-yaml" nil nil nil nil)))
         (langs (mapcar #'car recipes)))

    (mapcar (lambda (arg) (add-to-list 'treesit-language-source-alist arg)) recipes)
    (mapcar (lambda (lang) (unless (treesit-language-available-p lang)
                             (treesit-install-language-grammar lang))) langs))
#+end_src

** ~tree-sitter~-based folding
NOTE: this uses the old ~tree-sitter~ package instead of ~treesit~ which is now
built into emacs. Removing it for now to prevent it from messing up something
#+begin_src emacs-lisp
  (use-package ts-fold
    :straight (ts-fold :type git :host github :repo "emacs-tree-sitter/ts-fold"))
#+end_src

** TypeScript
#+begin_src emacs-lisp :tangle init.el
  (use-package typescript-ts-mode)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  (use-package tide
    :config
    (setq typescript-indent-level 2)
    (add-hook 'tsx-mode-hook #'setup-tide-mode)
    (add-hook 'tsx-ts-mode-hook #'setup-tide-mode)
    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    (add-hook 'typescript-ts-mode-hook #'setup-tide-mode)
    ;; (add-hook 'tsx-ts-mode-hook #'eglot-ensure)
    )
#+end_src

** WGSL
#+begin_src emacs-lisp :tangle init.el
  (use-package wgsl-ts-mode
    :straight (wgsl-ts-mode :type git :host github :repo "acowley/wgsl-ts-mode")
    :config
    (add-hook 'wgsl-ts-mode 'turn-on-font-lock))
#+end_src

** Rust
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'rust-ts-mode-hook 'eglot-ensure)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
#+end_src

** Python
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'python-mode-hook 'pyvenv-mode)
  (add-hook 'python-mode-hook 'eglot-ensure)
  ;; (with-eval-after-load 'eglot
  ;;   (add-to-list 'eglot-server-programs
  ;;                '(python-mode . ("ruff" "server")))
  ;;   (add-hook 'after-save-hook 'eglot-format))

  (use-package poetry)
#+end_src

A function that looks for the entry for python in ~eglot-server-programs~ and
replaces it with ~(setcdr)~
#+begin_src emacs-lisp
  (mapcar (lambda (item)
            (if (and
                 (listp (car item))
                 (member 'python-mode (car item)))
                (setcdr item '("ruff" "server"))))
          eglot-server-programs)
#+end_src
** YAML
#+begin_src emacs-lisp :tangle init.el
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-ts-mode))
#+end_src